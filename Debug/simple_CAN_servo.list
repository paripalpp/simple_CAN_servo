
simple_CAN_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b54  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d30  08003d30  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d30  08003d30  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d30  08003d30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000070  08003da8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08003da8  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e744  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002140  00000000  00000000  0002e7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00031688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019125  00000000  00000000  000322f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e39c  00000000  00000000  0004b41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a72c  00000000  00000000  000597b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3ee5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b5c  00000000  00000000  000e3f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003c4c 	.word	0x08003c4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003c4c 	.word	0x08003c4c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2iz>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d215      	bcs.n	8000752 <__aeabi_d2iz+0x36>
 8000726:	d511      	bpl.n	800074c <__aeabi_d2iz+0x30>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d912      	bls.n	8000758 <__aeabi_d2iz+0x3c>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000742:	fa23 f002 	lsr.w	r0, r3, r2
 8000746:	bf18      	it	ne
 8000748:	4240      	negne	r0, r0
 800074a:	4770      	bx	lr
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	4770      	bx	lr
 8000752:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000756:	d105      	bne.n	8000764 <__aeabi_d2iz+0x48>
 8000758:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>:
	TxHeader.DLC = data_len;
	TxHeader.TransmitGlobalTime = DISABLE;
	return HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &TxMailbox);
}

HAL_StatusTypeDef CAN_103xb::subscribe_message(uint32_t ID, ID_type ide, Frame_type rtr, FIFO fifo) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b092      	sub	sp, #72	; 0x48
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	4611      	mov	r1, r2
 8000778:	461a      	mov	r2, r3
 800077a:	460b      	mov	r3, r1
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	4613      	mov	r3, r2
 8000780:	71bb      	strb	r3, [r7, #6]
	uint32_t id_for_filter = (ID << ((ide == ID_type::std)?21:3)) | ide | rtr;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d101      	bne.n	800078c <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x20>
 8000788:	2315      	movs	r3, #21
 800078a:	e000      	b.n	800078e <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x22>
 800078c:	2303      	movs	r3, #3
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	409a      	lsls	r2, r3
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	431a      	orrs	r2, r3
 8000796:	79bb      	ldrb	r3, [r7, #6]
 8000798:	4313      	orrs	r3, r2
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
	int filter_buffer_index = -1;
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i < 14; i++){
 80007a2:	2300      	movs	r3, #0
 80007a4:	643b      	str	r3, [r7, #64]	; 0x40
 80007a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007a8:	2b0d      	cmp	r3, #13
 80007aa:	dc50      	bgt.n	800084e <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xe2>
		switch(this->filter_buffer[i].list){
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80007b0:	323c      	adds	r2, #60	; 0x3c
 80007b2:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d021      	beq.n	80007fe <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x92>
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	dc43      	bgt.n	8000846 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x5c>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d003      	beq.n	80007ce <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x62>
 80007c6:	e03e      	b.n	8000846 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
		case filter_buffer_status::list::empty:
			filter_buffer_index = i;
 80007c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 80007cc:	e03b      	b.n	8000846 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
		case filter_buffer_status::list::filled_harf:
			if(this->filter_buffer[i].fifo == fifo){
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007d2:	333c      	adds	r3, #60	; 0x3c
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4413      	add	r3, r2
 80007d8:	785b      	ldrb	r3, [r3, #1]
 80007da:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80007de:	429a      	cmp	r2, r3
 80007e0:	d12c      	bne.n	800083c <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd0>
				if(this->subscribed_id[i*2] == id_for_filter)
 80007e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007e4:	005a      	lsls	r2, r3, #1
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	3202      	adds	r2, #2
 80007ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d101      	bne.n	80007f8 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x8c>
					return HAL_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	e09f      	b.n	8000938 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
				else{
					filter_buffer_index = i;
 80007f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
					break;
 80007fc:	e023      	b.n	8000846 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
				}
			}else{
				continue;
			}
		case filter_buffer_status::list::filled:
			if(this->filter_buffer[i].fifo == fifo){
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000802:	333c      	adds	r3, #60	; 0x3c
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	785b      	ldrb	r3, [r3, #1]
 800080a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800080e:	429a      	cmp	r2, r3
 8000810:	d116      	bne.n	8000840 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd4>
				if(this->subscribed_id[i*2] == id_for_filter || this->subscribed_id[i*2+1] == id_for_filter)
 8000812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000814:	005a      	lsls	r2, r3, #1
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3202      	adds	r2, #2
 800081a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800081e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000820:	429a      	cmp	r2, r3
 8000822:	d009      	beq.n	8000838 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xcc>
 8000824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	1c5a      	adds	r2, r3, #1
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	3202      	adds	r2, #2
 800082e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000834:	429a      	cmp	r2, r3
 8000836:	d105      	bne.n	8000844 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd8>
					return HAL_OK;
 8000838:	2300      	movs	r3, #0
 800083a:	e07d      	b.n	8000938 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
				continue;
 800083c:	bf00      	nop
 800083e:	e002      	b.n	8000846 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
				else{
					continue;
				}
			}else{
				continue;
 8000840:	bf00      	nop
 8000842:	e000      	b.n	8000846 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
					continue;
 8000844:	bf00      	nop
	for(int i = 0; i < 14; i++){
 8000846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000848:	3301      	adds	r3, #1
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
 800084c:	e7ab      	b.n	80007a6 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x3a>
			}
		}
	}
	if(filter_buffer_index == -1)
 800084e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000854:	d101      	bne.n	800085a <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xee>
		return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e06e      	b.n	8000938 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	uint32_t id_for_filter_first = (this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::empty)?id_for_filter:this->subscribed_id[filter_buffer_index*2];
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800085e:	323c      	adds	r2, #60	; 0x3c
 8000860:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d006      	beq.n	8000876 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x10a>
 8000868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800086a:	005a      	lsls	r2, r3, #1
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3202      	adds	r2, #2
 8000870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000874:	e000      	b.n	8000878 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x10c>
 8000876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000878:	63bb      	str	r3, [r7, #56]	; 0x38
	CAN_FilterTypeDef filter;
	filter.FilterIdHigh = id_for_filter_first >> 16;
 800087a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800087c:	0c1b      	lsrs	r3, r3, #16
 800087e:	613b      	str	r3, [r7, #16]
	filter.FilterIdLow = id_for_filter_first & 0xffff;
 8000880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000882:	b29b      	uxth	r3, r3
 8000884:	617b      	str	r3, [r7, #20]
	filter.FilterMaskIdHigh = id_for_filter >> 16; 
 8000886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000888:	0c1b      	lsrs	r3, r3, #16
 800088a:	61bb      	str	r3, [r7, #24]
	filter.FilterMaskIdLow = id_for_filter & 0xffff;
 800088c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800088e:	b29b      	uxth	r3, r3
 8000890:	61fb      	str	r3, [r7, #28]
	filter.FilterScale = Filter_scale::_32;
 8000892:	2301      	movs	r3, #1
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
	filter.FilterMode = Filter_mode::list;
 8000896:	2301      	movs	r3, #1
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
	filter.FilterFIFOAssignment = fifo;
 800089a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800089e:	623b      	str	r3, [r7, #32]
	filter.FilterActivation = Filter_activation::enable;
 80008a0:	2301      	movs	r3, #1
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
	filter.FilterBank = filter_buffer_index;
 80008a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(this->hcan, &filter) != HAL_OK)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f107 0210 	add.w	r2, r7, #16
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 f991 	bl	8001bda <HAL_CAN_ConfigFilter>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	bf14      	ite	ne
 80008be:	2301      	movne	r3, #1
 80008c0:	2300      	moveq	r3, #0
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x160>
		return HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e035      	b.n	8000938 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	this->filter_buffer[filter_buffer_index].fifo = fifo;
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008d0:	333c      	adds	r3, #60	; 0x3c
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80008da:	705a      	strb	r2, [r3, #1]
	if(this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::empty){
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80008e0:	323c      	adds	r2, #60	; 0x3c
 80008e2:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d10e      	bne.n	8000908 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x19c>
		this->filter_buffer[filter_buffer_index].list = filter_buffer_status::list::filled_harf;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80008ee:	323c      	adds	r2, #60	; 0x3c
 80008f0:	2101      	movs	r1, #1
 80008f2:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		this->subscribed_id[filter_buffer_index*2] = id_for_filter;
 80008f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008f8:	005a      	lsls	r2, r3, #1
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3202      	adds	r2, #2
 80008fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return HAL_OK;
 8000904:	2300      	movs	r3, #0
 8000906:	e017      	b.n	8000938 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	}else if(this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::filled_harf){
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800090c:	323c      	adds	r2, #60	; 0x3c
 800090e:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d10f      	bne.n	8000936 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1ca>
		this->filter_buffer[filter_buffer_index].list = filter_buffer_status::list::filled;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800091a:	323c      	adds	r2, #60	; 0x3c
 800091c:	2102      	movs	r1, #2
 800091e:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		this->subscribed_id[filter_buffer_index*2+1] = id_for_filter;
 8000922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3202      	adds	r2, #2
 800092c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800092e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	e000      	b.n	8000938 <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	}else{
		return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
	}
}
 8000938:	4618      	mov	r0, r3
 800093a:	3748      	adds	r7, #72	; 0x48
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPh>:
	}else{
		return HAL_ERROR;
	}
}

read_retval CAN_103xb::read(FIFO fifo, uint8_t *data){
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	; 0x30
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	460b      	mov	r3, r1
 800094a:	607a      	str	r2, [r7, #4]
 800094c:	72fb      	strb	r3, [r7, #11]
	uint32_t fifofilllevel = HAL_CAN_GetRxFifoFillLevel(this->hcan, fifo);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	7afa      	ldrb	r2, [r7, #11]
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fba6 	bl	80020a8 <HAL_CAN_GetRxFifoFillLevel>
 800095c:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(fifofilllevel == 0)
 800095e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000960:	2b00      	cmp	r3, #0
 8000962:	d101      	bne.n	8000968 <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPh+0x28>
		return read_retval::no_message;
 8000964:	2300      	movs	r3, #0
 8000966:	e017      	b.n	8000998 <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPh+0x58>
	CAN_RxHeaderTypeDef RxHeader;
	if(HAL_CAN_GetRxMessage(this->hcan, fifo, &RxHeader, data) != HAL_OK)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	6858      	ldr	r0, [r3, #4]
 800096c:	7af9      	ldrb	r1, [r7, #11]
 800096e:	f107 0210 	add.w	r2, r7, #16
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f001 fa87 	bl	8001e86 <HAL_CAN_GetRxMessage>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	bf14      	ite	ne
 800097e:	2301      	movne	r3, #1
 8000980:	2300      	moveq	r3, #0
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPh+0x4c>
		return read_retval::error;
 8000988:	2303      	movs	r3, #3
 800098a:	e005      	b.n	8000998 <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPh+0x58>
	if(fifofilllevel == 1){
 800098c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098e:	2b01      	cmp	r3, #1
 8000990:	d101      	bne.n	8000996 <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPh+0x56>
		return read_retval::message_received;
 8000992:	2301      	movs	r3, #1
 8000994:	e000      	b.n	8000998 <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPh+0x58>
	}else{
		return read_retval::more_message_received;
 8000996:	2302      	movs	r3, #2
	}
}
 8000998:	4618      	mov	r0, r3
 800099a:	3730      	adds	r7, #48	; 0x30
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPhP19CAN_RxHeaderTypeDef>:

read_retval CAN_103xb::read(FIFO fifo, uint8_t *data, CAN_RxHeaderTypeDef *RxHeader){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	460b      	mov	r3, r1
 80009ae:	72fb      	strb	r3, [r7, #11]
	uint32_t fifofilllevel = HAL_CAN_GetRxFifoFillLevel(this->hcan, fifo);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	7afa      	ldrb	r2, [r7, #11]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 fb75 	bl	80020a8 <HAL_CAN_GetRxFifoFillLevel>
 80009be:	6178      	str	r0, [r7, #20]
	if(fifofilllevel == 0)
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d101      	bne.n	80009ca <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPhP19CAN_RxHeaderTypeDef+0x2a>
		return read_retval::no_message;
 80009c6:	2300      	movs	r3, #0
 80009c8:	e016      	b.n	80009f8 <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPhP19CAN_RxHeaderTypeDef+0x58>
	if(HAL_CAN_GetRxMessage(this->hcan, fifo, RxHeader, data) != HAL_OK)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	6858      	ldr	r0, [r3, #4]
 80009ce:	7af9      	ldrb	r1, [r7, #11]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	f001 fa57 	bl	8001e86 <HAL_CAN_GetRxMessage>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	bf14      	ite	ne
 80009de:	2301      	movne	r3, #1
 80009e0:	2300      	moveq	r3, #0
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPhP19CAN_RxHeaderTypeDef+0x4c>
		return read_retval::error;
 80009e8:	2303      	movs	r3, #3
 80009ea:	e005      	b.n	80009f8 <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPhP19CAN_RxHeaderTypeDef+0x58>
	if(fifofilllevel == 1){
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d101      	bne.n	80009f6 <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPhP19CAN_RxHeaderTypeDef+0x56>
		return read_retval::message_received;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e000      	b.n	80009f8 <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPhP19CAN_RxHeaderTypeDef+0x58>
	}else{
		return read_retval::more_message_received;
 80009f6:	2302      	movs	r3, #2
	}
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_ZN7stm_CAN9CAN_103xbC1EP19__CAN_HandleTypeDef>:

CAN_103xb::CAN_103xb(CAN_HandleTypeDef *hcan) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <_ZN7stm_CAN9CAN_103xbC1EP19__CAN_HandleTypeDef+0x2c>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->hcan = hcan;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	683a      	ldr	r2, [r7, #0]
 8000a14:	605a      	str	r2, [r3, #4]
	HAL_CAN_Start(this->hcan);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 f9a6 	bl	8001d6c <HAL_CAN_Start>
}
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	08003d18 	.word	0x08003d18

08000a30 <_ZN7stm_CAN9CAN_103xbD1Ev>:

CAN_103xb::~CAN_103xb() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <_ZN7stm_CAN9CAN_103xbD1Ev+0x24>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	HAL_CAN_Stop(this->hcan);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 f9d6 	bl	8001df4 <HAL_CAN_Stop>
}
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08003d18 	.word	0x08003d18

08000a58 <_ZN7stm_CAN9CAN_103xbD0Ev>:
CAN_103xb::~CAN_103xb() {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
}
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ffe5 	bl	8000a30 <_ZN7stm_CAN9CAN_103xbD1Ev>
 8000a66:	2194      	movs	r1, #148	; 0x94
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f003 f852 	bl	8003b12 <_ZdlPvj>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZZ4mainENKUlPZ4mainE11servo_tablehE_clES0_h>:
		  {&htim3, TIM_CHANNEL_3},
		  {&htim3, TIM_CHANNEL_4},
		  {&htim4, TIM_CHANNEL_1},
		  {&htim4, TIM_CHANNEL_2}
  };
  auto write_servo = [](struct servo_table* servo, uint8_t output){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	4613      	mov	r3, r2
 8000a84:	71fb      	strb	r3, [r7, #7]
	  servo->output = 1125 + (int)(4275.0 / 255.0 * output);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fddd 	bl	8000648 <__aeabi_i2d>
 8000a8e:	a31e      	add	r3, pc, #120	; (adr r3, 8000b08 <_ZZ4mainENKUlPZ4mainE11servo_tablehE_clES0_h+0x90>)
 8000a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a94:	f7ff fb5c 	bl	8000150 <__aeabi_dmul>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	4610      	mov	r0, r2
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f7ff fe3c 	bl	800071c <__aeabi_d2iz>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	f203 4365 	addw	r3, r3, #1125	; 0x465
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	811a      	strh	r2, [r3, #8]
	  __HAL_TIM_SetCompare(servo->htim, servo->channel, servo->output);
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d106      	bne.n	8000ac8 <_ZZ4mainENKUlPZ4mainE11servo_tablehE_clES0_h+0x50>
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	891a      	ldrh	r2, [r3, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
  };
 8000ac6:	e01b      	b.n	8000b00 <_ZZ4mainENKUlPZ4mainE11servo_tablehE_clES0_h+0x88>
	  __HAL_TIM_SetCompare(servo->htim, servo->channel, servo->output);
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d106      	bne.n	8000ade <_ZZ4mainENKUlPZ4mainE11servo_tablehE_clES0_h+0x66>
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	891a      	ldrh	r2, [r3, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	639a      	str	r2, [r3, #56]	; 0x38
  };
 8000adc:	e010      	b.n	8000b00 <_ZZ4mainENKUlPZ4mainE11servo_tablehE_clES0_h+0x88>
	  __HAL_TIM_SetCompare(servo->htim, servo->channel, servo->output);
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2b08      	cmp	r3, #8
 8000ae4:	d106      	bne.n	8000af4 <_ZZ4mainENKUlPZ4mainE11servo_tablehE_clES0_h+0x7c>
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	891a      	ldrh	r2, [r3, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	63da      	str	r2, [r3, #60]	; 0x3c
  };
 8000af2:	e005      	b.n	8000b00 <_ZZ4mainENKUlPZ4mainE11servo_tablehE_clES0_h+0x88>
	  __HAL_TIM_SetCompare(servo->htim, servo->channel, servo->output);
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	891a      	ldrh	r2, [r3, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	641a      	str	r2, [r3, #64]	; 0x40
  };
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	c3c3c3c4 	.word	0xc3c3c3c4
 8000b0c:	4030c3c3 	.word	0x4030c3c3

08000b10 <_ZZ4mainENKUlbE0_clEb>:
  auto set_power = [&](bool state){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	70fb      	strb	r3, [r7, #3]
	  if(state){
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d03d      	beq.n	8000b9e <_ZZ4mainENKUlbE0_clEb+0x8e>
		  HAL_GPIO_WritePin(pw_sw_out_GPIO_Port, pw_sw_out_Pin, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2120      	movs	r1, #32
 8000b26:	483f      	ldr	r0, [pc, #252]	; (8000c24 <_ZZ4mainENKUlbE0_clEb+0x114>)
 8000b28:	f001 fd65 	bl	80025f6 <HAL_GPIO_WritePin>
		  for(auto &i : servoes){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	339c      	adds	r3, #156	; 0x9c
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d06a      	beq.n	8000c1a <_ZZ4mainENKUlbE0_clEb+0x10a>
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	60bb      	str	r3, [r7, #8]
			  __HAL_TIM_SET_COMPARE(i.htim, i.channel, i.output);
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d106      	bne.n	8000b5e <_ZZ4mainENKUlbE0_clEb+0x4e>
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	891a      	ldrh	r2, [r3, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000b5c:	e01b      	b.n	8000b96 <_ZZ4mainENKUlbE0_clEb+0x86>
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	d106      	bne.n	8000b74 <_ZZ4mainENKUlbE0_clEb+0x64>
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	891a      	ldrh	r2, [r3, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	639a      	str	r2, [r3, #56]	; 0x38
 8000b72:	e010      	b.n	8000b96 <_ZZ4mainENKUlbE0_clEb+0x86>
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	d106      	bne.n	8000b8a <_ZZ4mainENKUlbE0_clEb+0x7a>
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	891a      	ldrh	r2, [r3, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b88:	e005      	b.n	8000b96 <_ZZ4mainENKUlbE0_clEb+0x86>
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	891a      	ldrh	r2, [r3, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	641a      	str	r2, [r3, #64]	; 0x40
		  for(auto &i : servoes){
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	330c      	adds	r3, #12
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9c:	e7ce      	b.n	8000b3c <_ZZ4mainENKUlbE0_clEb+0x2c>
		  }
	  }else{
		  HAL_GPIO_WritePin(pw_sw_out_GPIO_Port, pw_sw_out_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	4820      	ldr	r0, [pc, #128]	; (8000c24 <_ZZ4mainENKUlbE0_clEb+0x114>)
 8000ba4:	f001 fd27 	bl	80025f6 <HAL_GPIO_WritePin>
		  for(auto &i : servoes){
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	623b      	str	r3, [r7, #32]
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	339c      	adds	r3, #156	; 0x9c
 8000bb6:	61bb      	str	r3, [r7, #24]
 8000bb8:	6a3a      	ldr	r2, [r7, #32]
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d02c      	beq.n	8000c1a <_ZZ4mainENKUlbE0_clEb+0x10a>
 8000bc0:	6a3b      	ldr	r3, [r7, #32]
 8000bc2:	617b      	str	r3, [r7, #20]
			  __HAL_TIM_SetCompare(i.htim, i.channel, 45000);
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d106      	bne.n	8000bda <_ZZ4mainENKUlbE0_clEb+0xca>
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8000bd6:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd8:	e01b      	b.n	8000c12 <_ZZ4mainENKUlbE0_clEb+0x102>
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d106      	bne.n	8000bf0 <_ZZ4mainENKUlbE0_clEb+0xe0>
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8000bec:	639a      	str	r2, [r3, #56]	; 0x38
 8000bee:	e010      	b.n	8000c12 <_ZZ4mainENKUlbE0_clEb+0x102>
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b08      	cmp	r3, #8
 8000bf6:	d106      	bne.n	8000c06 <_ZZ4mainENKUlbE0_clEb+0xf6>
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8000c02:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c04:	e005      	b.n	8000c12 <_ZZ4mainENKUlbE0_clEb+0x102>
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8000c10:	641a      	str	r2, [r3, #64]	; 0x40
		  for(auto &i : servoes){
 8000c12:	6a3b      	ldr	r3, [r7, #32]
 8000c14:	330c      	adds	r3, #12
 8000c16:	623b      	str	r3, [r7, #32]
 8000c18:	e7ce      	b.n	8000bb8 <_ZZ4mainENKUlbE0_clEb+0xa8>
		  }
	  }
  };
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40010c00 	.word	0x40010c00

08000c28 <main>:
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0e4      	sub	sp, #400	; 0x190
 8000c2c:	af02      	add	r7, sp, #8
  HAL_Init();
 8000c2e:	f000 fe77 	bl	8001920 <HAL_Init>
  SystemClock_Config();
 8000c32:	f000 f8d5 	bl	8000de0 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8000c36:	f000 fc03 	bl	8001440 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8000c3a:	f000 f977 	bl	8000f2c <_ZL12MX_TIM1_Initv>
  MX_CAN_Init();
 8000c3e:	f000 f939 	bl	8000eb4 <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 8000c42:	f000 fa2d 	bl	80010a0 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000c46:	f000 fac3 	bl	80011d0 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000c4a:	f000 fb59 	bl	8001300 <_ZL12MX_TIM4_Initv>
  MX_USB_PCD_Init();
 8000c4e:	f000 fbcf 	bl	80013f0 <_ZL15MX_USB_PCD_Initv>
  stm_CAN::CAN_103xb can(&hcan);
 8000c52:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c56:	495f      	ldr	r1, [pc, #380]	; (8000dd4 <main+0x1ac>)
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fed1 	bl	8000a00 <_ZN7stm_CAN9CAN_103xbC1EP19__CAN_HandleTypeDef>
  constexpr uint32_t can_id[] = {0x0f};
 8000c5e:	230f      	movs	r3, #15
 8000c60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  can.subscribe_message(can_id[0], stm_CAN::ID_type::std, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
 8000c64:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8000c68:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2300      	movs	r3, #0
 8000c72:	2200      	movs	r2, #0
 8000c74:	f7ff fd7a 	bl	800076c <_ZN7stm_CAN9CAN_103xb17subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>
  } em_state = {GPIO_PIN_SET, GPIO_PIN_RESET};
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
  constexpr int servo_num = 13;
 8000c84:	230d      	movs	r3, #13
 8000c86:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  } servoes[] = {
 8000c8a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000c8e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8000c92:	4a51      	ldr	r2, [pc, #324]	; (8000dd8 <main+0x1b0>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	4611      	mov	r1, r2
 8000c98:	239c      	movs	r3, #156	; 0x9c
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f002 ff6a 	bl	8003b74 <memcpy>
  };
 8000ca0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000ca4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000ca8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000cac:	601a      	str	r2, [r3, #0]

  for(auto &i : servoes){
 8000cae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cb2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000cb6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000cba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000cbe:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000cc2:	339c      	adds	r3, #156	; 0x9c
 8000cc4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8000cc8:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000ccc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d013      	beq.n	8000cfc <main+0xd4>
 8000cd4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000cd8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	  HAL_TIM_PWM_Start(i.htim, i.channel);
 8000cdc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4610      	mov	r0, r2
 8000cec:	f002 fa94 	bl	8003218 <HAL_TIM_PWM_Start>
  for(auto &i : servoes){
 8000cf0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000cf4:	330c      	adds	r3, #12
 8000cf6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000cfa:	e7e5      	b.n	8000cc8 <main+0xa0>
  }
  set_power(1);
 8000cfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d00:	2101      	movs	r1, #1
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff04 	bl	8000b10 <_ZZ4mainENKUlbE0_clEb>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    em_state.now = HAL_GPIO_ReadPin(em_in_GPIO_Port, em_in_Pin);
 8000d08:	2110      	movs	r1, #16
 8000d0a:	4834      	ldr	r0, [pc, #208]	; (8000ddc <main+0x1b4>)
 8000d0c:	f001 fc5c 	bl	80025c8 <HAL_GPIO_ReadPin>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

    if(em_state.now == GPIO_PIN_RESET){
 8000d16:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d144      	bne.n	8000da8 <main+0x180>
      if(em_state.prev == GPIO_PIN_SET)set_power(1);
 8000d1e:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d105      	bne.n	8000d32 <main+0x10a>
 8000d26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff feef 	bl	8000b10 <_ZZ4mainENKUlbE0_clEb>
      uint8_t data[8];
      CAN_RxHeaderTypeDef header;
      if(can.read(stm_CAN::FIFO::_0, data, &header) && HAL_GPIO_ReadPin(em_in_GPIO_Port, em_in_Pin) == 0){
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d3a:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f7ff fe2e 	bl	80009a0 <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPhP19CAN_RxHeaderTypeDef>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d008      	beq.n	8000d5c <main+0x134>
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	4823      	ldr	r0, [pc, #140]	; (8000ddc <main+0x1b4>)
 8000d4e:	f001 fc3b 	bl	80025c8 <HAL_GPIO_ReadPin>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d101      	bne.n	8000d5c <main+0x134>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <main+0x136>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d033      	beq.n	8000dca <main+0x1a2>
        for (int i = 0; i < 8; i++){
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000d68:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000d6c:	2b07      	cmp	r3, #7
 8000d6e:	dc2c      	bgt.n	8000dca <main+0x1a2>
          write_servo(&servoes[i], data[i]);
 8000d70:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000d74:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4419      	add	r1, r3
 8000d82:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000d86:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8000d8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000d8e:	4413      	add	r3, r2
 8000d90:	781a      	ldrb	r2, [r3, #0]
 8000d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fe6e 	bl	8000a78 <_ZZ4mainENKUlPZ4mainE11servo_tablehE_clES0_h>
        for (int i = 0; i < 8; i++){
 8000d9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000da0:	3301      	adds	r3, #1
 8000da2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000da6:	e7df      	b.n	8000d68 <main+0x140>
        }
      }
//      for(servo_table &i : servoes){
//        write_servo(&i, 255);
//      }
    }else if(em_state.now == GPIO_PIN_SET){
 8000da8:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d10c      	bne.n	8000dca <main+0x1a2>
      set_power(0);
 8000db0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff feaa 	bl	8000b10 <_ZZ4mainENKUlbE0_clEb>
      uint8_t data[8];
      can.read(stm_CAN::FIFO::_0, data);
 8000dbc:	1d3a      	adds	r2, r7, #4
 8000dbe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fdbb 	bl	8000940 <_ZN7stm_CAN9CAN_103xb4readENS_4FIFOEPh>
    }
    em_state.prev = em_state.now;
 8000dca:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8000dce:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000dd2:	e799      	b.n	8000d08 <main+0xe0>
 8000dd4:	2000008c 	.word	0x2000008c
 8000dd8:	08003c64 	.word	0x08003c64
 8000ddc:	40010c00 	.word	0x40010c00

08000de0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b094      	sub	sp, #80	; 0x50
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dea:	2228      	movs	r2, #40	; 0x28
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 fece 	bl	8003b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e10:	2301      	movs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fd00 	bl	800283c <HAL_RCC_OscConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bf14      	ite	ne
 8000e42:	2301      	movne	r3, #1
 8000e44:	2300      	moveq	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000e4c:	f000 fb5a 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e60:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 ff67 	bl	8002d40 <HAL_RCC_ClockConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf14      	ite	ne
 8000e78:	2301      	movne	r3, #1
 8000e7a:	2300      	moveq	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8000e82:	f000 fb3f 	bl	8001504 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e86:	2310      	movs	r3, #16
 8000e88:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 f8bb 	bl	800300c <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf14      	ite	ne
 8000e9c:	2301      	movne	r3, #1
 8000e9e:	2300      	moveq	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8000ea6:	f000 fb2d 	bl	8001504 <Error_Handler>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3750      	adds	r7, #80	; 0x50
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <_ZL11MX_CAN_Initv+0x70>)
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <_ZL11MX_CAN_Initv+0x74>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <_ZL11MX_CAN_Initv+0x70>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <_ZL11MX_CAN_Initv+0x70>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <_ZL11MX_CAN_Initv+0x70>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <_ZL11MX_CAN_Initv+0x70>)
 8000ed2:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000ed6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <_ZL11MX_CAN_Initv+0x70>)
 8000eda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ede:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <_ZL11MX_CAN_Initv+0x70>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <_ZL11MX_CAN_Initv+0x70>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <_ZL11MX_CAN_Initv+0x70>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <_ZL11MX_CAN_Initv+0x70>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <_ZL11MX_CAN_Initv+0x70>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <_ZL11MX_CAN_Initv+0x70>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f04:	4807      	ldr	r0, [pc, #28]	; (8000f24 <_ZL11MX_CAN_Initv+0x70>)
 8000f06:	f000 fd6d 	bl	80019e4 <HAL_CAN_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 8000f1a:	f000 faf3 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000008c 	.word	0x2000008c
 8000f28:	40006400 	.word	0x40006400

08000f2c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b092      	sub	sp, #72	; 0x48
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
 8000f4c:	615a      	str	r2, [r3, #20]
 8000f4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2220      	movs	r2, #32
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 fe1a 	bl	8003b90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f5c:	4b4e      	ldr	r3, [pc, #312]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 8000f5e:	4a4f      	ldr	r2, [pc, #316]	; (800109c <_ZL12MX_TIM1_Initv+0x170>)
 8000f60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8000f62:	4b4d      	ldr	r3, [pc, #308]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 8000f64:	221f      	movs	r2, #31
 8000f66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f68:	4b4b      	ldr	r3, [pc, #300]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 44999;
 8000f6e:	4b4a      	ldr	r3, [pc, #296]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 8000f70:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000f74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f76:	4b48      	ldr	r3, [pc, #288]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f7c:	4b46      	ldr	r3, [pc, #280]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b45      	ldr	r3, [pc, #276]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f88:	4843      	ldr	r0, [pc, #268]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 8000f8a:	f002 f8f5 	bl	8003178 <HAL_TIM_PWM_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	bf14      	ite	ne
 8000f94:	2301      	movne	r3, #1
 8000f96:	2300      	moveq	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8000f9e:	f000 fab1 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000faa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4839      	ldr	r0, [pc, #228]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 8000fb2:	f002 fc9f 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	bf14      	ite	ne
 8000fbc:	2301      	movne	r3, #1
 8000fbe:	2300      	moveq	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8000fc6:	f000 fa9d 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fca:	2360      	movs	r3, #96	; 0x60
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	482a      	ldr	r0, [pc, #168]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 8000ff0:	f002 f9b4 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	bf14      	ite	ne
 8000ffa:	2301      	movne	r3, #1
 8000ffc:	2300      	moveq	r3, #0
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001004:	f000 fa7e 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	2204      	movs	r2, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4821      	ldr	r0, [pc, #132]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 8001012:	f002 f9a3 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf14      	ite	ne
 800101c:	2301      	movne	r3, #1
 800101e:	2300      	moveq	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001026:	f000 fa6d 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800102a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102e:	2208      	movs	r2, #8
 8001030:	4619      	mov	r1, r3
 8001032:	4819      	ldr	r0, [pc, #100]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 8001034:	f002 f992 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	bf14      	ite	ne
 800103e:	2301      	movne	r3, #1
 8001040:	2300      	moveq	r3, #0
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001048:	f000 fa5c 	bl	8001504 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001064:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	480a      	ldr	r0, [pc, #40]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 8001070:	f002 fc9e 	bl	80039b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf14      	ite	ne
 800107a:	2301      	movne	r3, #1
 800107c:	2300      	moveq	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 8001084:	f000 fa3e 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <_ZL12MX_TIM1_Initv+0x16c>)
 800108a:	f000 fb2b 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 800108e:	bf00      	nop
 8001090:	3748      	adds	r7, #72	; 0x48
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000b4 	.word	0x200000b4
 800109c:	40012c00 	.word	0x40012c00

080010a0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
 80010be:	615a      	str	r2, [r3, #20]
 80010c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c2:	4b42      	ldr	r3, [pc, #264]	; (80011cc <_ZL12MX_TIM2_Initv+0x12c>)
 80010c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80010ca:	4b40      	ldr	r3, [pc, #256]	; (80011cc <_ZL12MX_TIM2_Initv+0x12c>)
 80010cc:	221f      	movs	r2, #31
 80010ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b3e      	ldr	r3, [pc, #248]	; (80011cc <_ZL12MX_TIM2_Initv+0x12c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 44999;
 80010d6:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <_ZL12MX_TIM2_Initv+0x12c>)
 80010d8:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80010dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <_ZL12MX_TIM2_Initv+0x12c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b39      	ldr	r3, [pc, #228]	; (80011cc <_ZL12MX_TIM2_Initv+0x12c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010ea:	4838      	ldr	r0, [pc, #224]	; (80011cc <_ZL12MX_TIM2_Initv+0x12c>)
 80010ec:	f002 f844 	bl	8003178 <HAL_TIM_PWM_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf14      	ite	ne
 80010f6:	2301      	movne	r3, #1
 80010f8:	2300      	moveq	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8001100:	f000 fa00 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	4619      	mov	r1, r3
 8001112:	482e      	ldr	r0, [pc, #184]	; (80011cc <_ZL12MX_TIM2_Initv+0x12c>)
 8001114:	f002 fbee 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	bf14      	ite	ne
 800111e:	2301      	movne	r3, #1
 8001120:	2300      	moveq	r3, #0
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8001128:	f000 f9ec 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112c:	2360      	movs	r3, #96	; 0x60
 800112e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	4822      	ldr	r0, [pc, #136]	; (80011cc <_ZL12MX_TIM2_Initv+0x12c>)
 8001144:	f002 f90a 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	bf14      	ite	ne
 800114e:	2301      	movne	r3, #1
 8001150:	2300      	moveq	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8001158:	f000 f9d4 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2204      	movs	r2, #4
 8001160:	4619      	mov	r1, r3
 8001162:	481a      	ldr	r0, [pc, #104]	; (80011cc <_ZL12MX_TIM2_Initv+0x12c>)
 8001164:	f002 f8fa 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	bf14      	ite	ne
 800116e:	2301      	movne	r3, #1
 8001170:	2300      	moveq	r3, #0
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001178:	f000 f9c4 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2208      	movs	r2, #8
 8001180:	4619      	mov	r1, r3
 8001182:	4812      	ldr	r0, [pc, #72]	; (80011cc <_ZL12MX_TIM2_Initv+0x12c>)
 8001184:	f002 f8ea 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf14      	ite	ne
 800118e:	2301      	movne	r3, #1
 8001190:	2300      	moveq	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <_ZL12MX_TIM2_Initv+0xfc>
  {
    Error_Handler();
 8001198:	f000 f9b4 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	220c      	movs	r2, #12
 80011a0:	4619      	mov	r1, r3
 80011a2:	480a      	ldr	r0, [pc, #40]	; (80011cc <_ZL12MX_TIM2_Initv+0x12c>)
 80011a4:	f002 f8da 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bf14      	ite	ne
 80011ae:	2301      	movne	r3, #1
 80011b0:	2300      	moveq	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <_ZL12MX_TIM2_Initv+0x11c>
  {
    Error_Handler();
 80011b8:	f000 f9a4 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <_ZL12MX_TIM2_Initv+0x12c>)
 80011be:	f000 fa91 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000fc 	.word	0x200000fc

080011d0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f2:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <_ZL12MX_TIM3_Initv+0x128>)
 80011f4:	4a41      	ldr	r2, [pc, #260]	; (80012fc <_ZL12MX_TIM3_Initv+0x12c>)
 80011f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 80011f8:	4b3f      	ldr	r3, [pc, #252]	; (80012f8 <_ZL12MX_TIM3_Initv+0x128>)
 80011fa:	221f      	movs	r2, #31
 80011fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <_ZL12MX_TIM3_Initv+0x128>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 44999;
 8001204:	4b3c      	ldr	r3, [pc, #240]	; (80012f8 <_ZL12MX_TIM3_Initv+0x128>)
 8001206:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800120a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <_ZL12MX_TIM3_Initv+0x128>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <_ZL12MX_TIM3_Initv+0x128>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001218:	4837      	ldr	r0, [pc, #220]	; (80012f8 <_ZL12MX_TIM3_Initv+0x128>)
 800121a:	f001 ffad 	bl	8003178 <HAL_TIM_PWM_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	bf14      	ite	ne
 8001224:	2301      	movne	r3, #1
 8001226:	2300      	moveq	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 800122e:	f000 f969 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	4619      	mov	r1, r3
 8001240:	482d      	ldr	r0, [pc, #180]	; (80012f8 <_ZL12MX_TIM3_Initv+0x128>)
 8001242:	f002 fb57 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	bf14      	ite	ne
 800124c:	2301      	movne	r3, #1
 800124e:	2300      	moveq	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8001256:	f000 f955 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125a:	2360      	movs	r3, #96	; 0x60
 800125c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	4619      	mov	r1, r3
 8001270:	4821      	ldr	r0, [pc, #132]	; (80012f8 <_ZL12MX_TIM3_Initv+0x128>)
 8001272:	f002 f873 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	bf14      	ite	ne
 800127c:	2301      	movne	r3, #1
 800127e:	2300      	moveq	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8001286:	f000 f93d 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2204      	movs	r2, #4
 800128e:	4619      	mov	r1, r3
 8001290:	4819      	ldr	r0, [pc, #100]	; (80012f8 <_ZL12MX_TIM3_Initv+0x128>)
 8001292:	f002 f863 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf14      	ite	ne
 800129c:	2301      	movne	r3, #1
 800129e:	2300      	moveq	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80012a6:	f000 f92d 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2208      	movs	r2, #8
 80012ae:	4619      	mov	r1, r3
 80012b0:	4811      	ldr	r0, [pc, #68]	; (80012f8 <_ZL12MX_TIM3_Initv+0x128>)
 80012b2:	f002 f853 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf14      	ite	ne
 80012bc:	2301      	movne	r3, #1
 80012be:	2300      	moveq	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 80012c6:	f000 f91d 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	220c      	movs	r2, #12
 80012ce:	4619      	mov	r1, r3
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <_ZL12MX_TIM3_Initv+0x128>)
 80012d2:	f002 f843 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf14      	ite	ne
 80012dc:	2301      	movne	r3, #1
 80012de:	2300      	moveq	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 80012e6:	f000 f90d 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012ea:	4803      	ldr	r0, [pc, #12]	; (80012f8 <_ZL12MX_TIM3_Initv+0x128>)
 80012ec:	f000 f9fa 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000144 	.word	0x20000144
 80012fc:	40000400 	.word	0x40000400

08001300 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <_ZL12MX_TIM4_Initv+0xe8>)
 8001324:	4a31      	ldr	r2, [pc, #196]	; (80013ec <_ZL12MX_TIM4_Initv+0xec>)
 8001326:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31;
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <_ZL12MX_TIM4_Initv+0xe8>)
 800132a:	221f      	movs	r2, #31
 800132c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <_ZL12MX_TIM4_Initv+0xe8>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 44999;
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <_ZL12MX_TIM4_Initv+0xe8>)
 8001336:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800133a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <_ZL12MX_TIM4_Initv+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <_ZL12MX_TIM4_Initv+0xe8>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001348:	4827      	ldr	r0, [pc, #156]	; (80013e8 <_ZL12MX_TIM4_Initv+0xe8>)
 800134a:	f001 ff15 	bl	8003178 <HAL_TIM_PWM_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf14      	ite	ne
 8001354:	2301      	movne	r3, #1
 8001356:	2300      	moveq	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 800135e:	f000 f8d1 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	4619      	mov	r1, r3
 8001370:	481d      	ldr	r0, [pc, #116]	; (80013e8 <_ZL12MX_TIM4_Initv+0xe8>)
 8001372:	f002 fabf 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	bf14      	ite	ne
 800137c:	2301      	movne	r3, #1
 800137e:	2300      	moveq	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 8001386:	f000 f8bd 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	; 0x60
 800138c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	4811      	ldr	r0, [pc, #68]	; (80013e8 <_ZL12MX_TIM4_Initv+0xe8>)
 80013a2:	f001 ffdb 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf14      	ite	ne
 80013ac:	2301      	movne	r3, #1
 80013ae:	2300      	moveq	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 80013b6:	f000 f8a5 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2204      	movs	r2, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4809      	ldr	r0, [pc, #36]	; (80013e8 <_ZL12MX_TIM4_Initv+0xe8>)
 80013c2:	f001 ffcb 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf14      	ite	ne
 80013cc:	2301      	movne	r3, #1
 80013ce:	2300      	moveq	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 80013d6:	f000 f895 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <_ZL12MX_TIM4_Initv+0xe8>)
 80013dc:	f000 f982 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000018c 	.word	0x2000018c
 80013ec:	40000800 	.word	0x40000800

080013f0 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <_ZL15MX_USB_PCD_Initv+0x48>)
 80013f6:	4a11      	ldr	r2, [pc, #68]	; (800143c <_ZL15MX_USB_PCD_Initv+0x4c>)
 80013f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <_ZL15MX_USB_PCD_Initv+0x48>)
 80013fc:	2208      	movs	r2, #8
 80013fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <_ZL15MX_USB_PCD_Initv+0x48>)
 8001402:	2202      	movs	r2, #2
 8001404:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <_ZL15MX_USB_PCD_Initv+0x48>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <_ZL15MX_USB_PCD_Initv+0x48>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <_ZL15MX_USB_PCD_Initv+0x48>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <_ZL15MX_USB_PCD_Initv+0x48>)
 800141a:	f001 f904 	bl	8002626 <HAL_PCD_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf14      	ite	ne
 8001424:	2301      	movne	r3, #1
 8001426:	2300      	moveq	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <_ZL15MX_USB_PCD_Initv+0x42>
  {
    Error_Handler();
 800142e:	f000 f869 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200001d4 	.word	0x200001d4
 800143c:	40005c00 	.word	0x40005c00

08001440 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001454:	4b29      	ldr	r3, [pc, #164]	; (80014fc <_ZL12MX_GPIO_Initv+0xbc>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a28      	ldr	r2, [pc, #160]	; (80014fc <_ZL12MX_GPIO_Initv+0xbc>)
 800145a:	f043 0310 	orr.w	r3, r3, #16
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <_ZL12MX_GPIO_Initv+0xbc>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <_ZL12MX_GPIO_Initv+0xbc>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a22      	ldr	r2, [pc, #136]	; (80014fc <_ZL12MX_GPIO_Initv+0xbc>)
 8001472:	f043 0320 	orr.w	r3, r3, #32
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b20      	ldr	r3, [pc, #128]	; (80014fc <_ZL12MX_GPIO_Initv+0xbc>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0320 	and.w	r3, r3, #32
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <_ZL12MX_GPIO_Initv+0xbc>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a1c      	ldr	r2, [pc, #112]	; (80014fc <_ZL12MX_GPIO_Initv+0xbc>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <_ZL12MX_GPIO_Initv+0xbc>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <_ZL12MX_GPIO_Initv+0xbc>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a16      	ldr	r2, [pc, #88]	; (80014fc <_ZL12MX_GPIO_Initv+0xbc>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <_ZL12MX_GPIO_Initv+0xbc>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pw_sw_out_GPIO_Port, pw_sw_out_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2120      	movs	r1, #32
 80014b8:	4811      	ldr	r0, [pc, #68]	; (8001500 <_ZL12MX_GPIO_Initv+0xc0>)
 80014ba:	f001 f89c 	bl	80025f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : em_in_Pin */
  GPIO_InitStruct.Pin = em_in_Pin;
 80014be:	2310      	movs	r3, #16
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(em_in_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	4619      	mov	r1, r3
 80014d0:	480b      	ldr	r0, [pc, #44]	; (8001500 <_ZL12MX_GPIO_Initv+0xc0>)
 80014d2:	f000 fef5 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : pw_sw_out_Pin */
  GPIO_InitStruct.Pin = pw_sw_out_Pin;
 80014d6:	2320      	movs	r3, #32
 80014d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pw_sw_out_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4619      	mov	r1, r3
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <_ZL12MX_GPIO_Initv+0xc0>)
 80014ee:	f000 fee7 	bl	80022c0 <HAL_GPIO_Init>

}
 80014f2:	bf00      	nop
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010c00 	.word	0x40010c00

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_MspInit+0x5c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a14      	ldr	r2, [pc, #80]	; (800156c <HAL_MspInit+0x5c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_MspInit+0x5c>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x5c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_MspInit+0x5c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_MspInit+0x5c>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_MspInit+0x60>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_MspInit+0x60>)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000

08001574 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a25      	ldr	r2, [pc, #148]	; (8001624 <HAL_CAN_MspInit+0xb0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d143      	bne.n	800161c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <HAL_CAN_MspInit+0xb4>)
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	4a23      	ldr	r2, [pc, #140]	; (8001628 <HAL_CAN_MspInit+0xb4>)
 800159a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800159e:	61d3      	str	r3, [r2, #28]
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_CAN_MspInit+0xb4>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_CAN_MspInit+0xb4>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_CAN_MspInit+0xb4>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_CAN_MspInit+0xb4>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4814      	ldr	r0, [pc, #80]	; (800162c <HAL_CAN_MspInit+0xb8>)
 80015da:	f000 fe71 	bl	80022c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	480e      	ldr	r0, [pc, #56]	; (800162c <HAL_CAN_MspInit+0xb8>)
 80015f4:	f000 fe64 	bl	80022c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_CAN_MspInit+0xbc>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_CAN_MspInit+0xbc>)
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	; 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40006400 	.word	0x40006400
 8001628:	40021000 	.word	0x40021000
 800162c:	40010c00 	.word	0x40010c00
 8001630:	40010000 	.word	0x40010000

08001634 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a24      	ldr	r2, [pc, #144]	; (80016d4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d10c      	bne.n	8001660 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_TIM_PWM_MspInit+0xa4>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	4a23      	ldr	r2, [pc, #140]	; (80016d8 <HAL_TIM_PWM_MspInit+0xa4>)
 800164c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001650:	6193      	str	r3, [r2, #24]
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_TIM_PWM_MspInit+0xa4>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800165e:	e034      	b.n	80016ca <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001668:	d10c      	bne.n	8001684 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_TIM_PWM_MspInit+0xa4>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a1a      	ldr	r2, [pc, #104]	; (80016d8 <HAL_TIM_PWM_MspInit+0xa4>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_TIM_PWM_MspInit+0xa4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
}
 8001682:	e022      	b.n	80016ca <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM3)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <HAL_TIM_PWM_MspInit+0xa8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d10c      	bne.n	80016a8 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_TIM_PWM_MspInit+0xa4>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <HAL_TIM_PWM_MspInit+0xa4>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	61d3      	str	r3, [r2, #28]
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_TIM_PWM_MspInit+0xa4>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
}
 80016a6:	e010      	b.n	80016ca <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM4)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <HAL_TIM_PWM_MspInit+0xac>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d10b      	bne.n	80016ca <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_TIM_PWM_MspInit+0xa4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_TIM_PWM_MspInit+0xa4>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_TIM_PWM_MspInit+0xa4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
}
 80016ca:	bf00      	nop
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40012c00 	.word	0x40012c00
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40000400 	.word	0x40000400
 80016e0:	40000800 	.word	0x40000800

080016e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0320 	add.w	r3, r7, #32
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a49      	ldr	r2, [pc, #292]	; (8001824 <HAL_TIM_MspPostInit+0x140>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d119      	bne.n	8001738 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	4b48      	ldr	r3, [pc, #288]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a47      	ldr	r2, [pc, #284]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b45      	ldr	r3, [pc, #276]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800171c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2302      	movs	r3, #2
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0320 	add.w	r3, r7, #32
 800172e:	4619      	mov	r1, r3
 8001730:	483e      	ldr	r0, [pc, #248]	; (800182c <HAL_TIM_MspPostInit+0x148>)
 8001732:	f000 fdc5 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001736:	e070      	b.n	800181a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001740:	d118      	bne.n	8001774 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4a38      	ldr	r2, [pc, #224]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6193      	str	r3, [r2, #24]
 800174e:	4b36      	ldr	r3, [pc, #216]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800175a:	230f      	movs	r3, #15
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2302      	movs	r3, #2
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 0320 	add.w	r3, r7, #32
 800176a:	4619      	mov	r1, r3
 800176c:	482f      	ldr	r0, [pc, #188]	; (800182c <HAL_TIM_MspPostInit+0x148>)
 800176e:	f000 fda7 	bl	80022c0 <HAL_GPIO_Init>
}
 8001772:	e052      	b.n	800181a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM3)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <HAL_TIM_MspPostInit+0x14c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d130      	bne.n	80017e0 <HAL_TIM_MspPostInit+0xfc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	4a29      	ldr	r2, [pc, #164]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	6193      	str	r3, [r2, #24]
 800178a:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	4a23      	ldr	r2, [pc, #140]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	6193      	str	r3, [r2, #24]
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ae:	23c0      	movs	r3, #192	; 0xc0
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2302      	movs	r3, #2
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0320 	add.w	r3, r7, #32
 80017be:	4619      	mov	r1, r3
 80017c0:	481a      	ldr	r0, [pc, #104]	; (800182c <HAL_TIM_MspPostInit+0x148>)
 80017c2:	f000 fd7d 	bl	80022c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017c6:	2303      	movs	r3, #3
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2302      	movs	r3, #2
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	4619      	mov	r1, r3
 80017d8:	4816      	ldr	r0, [pc, #88]	; (8001834 <HAL_TIM_MspPostInit+0x150>)
 80017da:	f000 fd71 	bl	80022c0 <HAL_GPIO_Init>
}
 80017de:	e01c      	b.n	800181a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_TIM_MspPostInit+0x154>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d117      	bne.n	800181a <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6193      	str	r3, [r2, #24]
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_TIM_MspPostInit+0x144>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001802:	23c0      	movs	r3, #192	; 0xc0
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2302      	movs	r3, #2
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	4619      	mov	r1, r3
 8001814:	4807      	ldr	r0, [pc, #28]	; (8001834 <HAL_TIM_MspPostInit+0x150>)
 8001816:	f000 fd53 	bl	80022c0 <HAL_GPIO_Init>
}
 800181a:	bf00      	nop
 800181c:	3730      	adds	r7, #48	; 0x30
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40012c00 	.word	0x40012c00
 8001828:	40021000 	.word	0x40021000
 800182c:	40010800 	.word	0x40010800
 8001830:	40000400 	.word	0x40000400
 8001834:	40010c00 	.word	0x40010c00
 8001838:	40000800 	.word	0x40000800

0800183c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_PCD_MspInit+0x34>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d10b      	bne.n	8001866 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_PCD_MspInit+0x38>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_PCD_MspInit+0x38>)
 8001854:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_PCD_MspInit+0x38>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40005c00 	.word	0x40005c00
 8001874:	40021000 	.word	0x40021000

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018be:	f000 f875 	bl	80019ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
	...

080018d4 <Reset_Handler>:
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <LoopFillZerobss+0x12>)
 80018d6:	490d      	ldr	r1, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <LoopFillZerobss+0x1a>)
 80018da:	2300      	movs	r3, #0
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:
 80018de:	58d4      	ldr	r4, [r2, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:
 80018e4:	18c4      	adds	r4, r0, r3
 80018e6:	428c      	cmp	r4, r1
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <LoopFillZerobss+0x1e>)
 80018ec:	4c0a      	ldr	r4, [pc, #40]	; (8001918 <LoopFillZerobss+0x22>)
 80018ee:	2300      	movs	r3, #0
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:
 80018f6:	42a2      	cmp	r2, r4
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>
 80018fa:	f7ff ffe4 	bl	80018c6 <SystemInit>
 80018fe:	f002 f90d 	bl	8003b1c <__libc_init_array>
 8001902:	f7ff f991 	bl	8000c28 <main>
 8001906:	4770      	bx	lr
 8001908:	20000000 	.word	0x20000000
 800190c:	20000070 	.word	0x20000070
 8001910:	08003d38 	.word	0x08003d38
 8001914:	20000070 	.word	0x20000070
 8001918:	200004cc 	.word	0x200004cc

0800191c <ADC1_2_IRQHandler>:
 800191c:	e7fe      	b.n	800191c <ADC1_2_IRQHandler>
	...

08001920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_Init+0x28>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_Init+0x28>)
 800192a:	f043 0310 	orr.w	r3, r3, #16
 800192e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f000 fc91 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001936:	200f      	movs	r0, #15
 8001938:	f000 f808 	bl	800194c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800193c:	f7ff fde8 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40022000 	.word	0x40022000

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_InitTick+0x54>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_InitTick+0x58>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	fbb3 f3f1 	udiv	r3, r3, r1
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fc9b 	bl	80022a6 <HAL_SYSTICK_Config>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00e      	b.n	8001998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d80a      	bhi.n	8001996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f000 fc71 	bl	800226e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198c:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <HAL_InitTick+0x5c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000008 	.word	0x20000008
 80019a8:	20000004 	.word	0x20000004

080019ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_IncTick+0x1c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_IncTick+0x20>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a03      	ldr	r2, [pc, #12]	; (80019cc <HAL_IncTick+0x20>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	20000008 	.word	0x20000008
 80019cc:	200004c0 	.word	0x200004c0

080019d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <HAL_GetTick+0x10>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	200004c0 	.word	0x200004c0

080019e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0ed      	b.n	8001bd2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fdb6 	bl	8001574 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a18:	f7ff ffda 	bl	80019d0 <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a1e:	e012      	b.n	8001a46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a20:	f7ff ffd6 	bl	80019d0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b0a      	cmp	r3, #10
 8001a2c:	d90b      	bls.n	8001a46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2205      	movs	r2, #5
 8001a3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0c5      	b.n	8001bd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0e5      	beq.n	8001a20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0202 	bic.w	r2, r2, #2
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a64:	f7ff ffb4 	bl	80019d0 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a6a:	e012      	b.n	8001a92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a6c:	f7ff ffb0 	bl	80019d0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b0a      	cmp	r3, #10
 8001a78:	d90b      	bls.n	8001a92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2205      	movs	r2, #5
 8001a8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e09f      	b.n	8001bd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1e5      	bne.n	8001a6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7e1b      	ldrb	r3, [r3, #24]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d108      	bne.n	8001aba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	e007      	b.n	8001aca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7e5b      	ldrb	r3, [r3, #25]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d108      	bne.n	8001ae4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e007      	b.n	8001af4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001af2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7e9b      	ldrb	r3, [r3, #26]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d108      	bne.n	8001b0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0220 	orr.w	r2, r2, #32
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e007      	b.n	8001b1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0220 	bic.w	r2, r2, #32
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7edb      	ldrb	r3, [r3, #27]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d108      	bne.n	8001b38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0210 	bic.w	r2, r2, #16
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e007      	b.n	8001b48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0210 	orr.w	r2, r2, #16
 8001b46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7f1b      	ldrb	r3, [r3, #28]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d108      	bne.n	8001b62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0208 	orr.w	r2, r2, #8
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e007      	b.n	8001b72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0208 	bic.w	r2, r2, #8
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7f5b      	ldrb	r3, [r3, #29]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d108      	bne.n	8001b8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0204 	orr.w	r2, r2, #4
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	e007      	b.n	8001b9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0204 	bic.w	r2, r2, #4
 8001b9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	ea42 0103 	orr.w	r1, r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	1e5a      	subs	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b087      	sub	sp, #28
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bf2:	7cfb      	ldrb	r3, [r7, #19]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d003      	beq.n	8001c00 <HAL_CAN_ConfigFilter+0x26>
 8001bf8:	7cfb      	ldrb	r3, [r7, #19]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	f040 80aa 	bne.w	8001d54 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c06:	f043 0201 	orr.w	r2, r3, #1
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	2201      	movs	r2, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d123      	bne.n	8001c82 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	401a      	ands	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3248      	adds	r2, #72	; 0x48
 8001c62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c78:	6979      	ldr	r1, [r7, #20]
 8001c7a:	3348      	adds	r3, #72	; 0x48
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d122      	bne.n	8001cd0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001caa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3248      	adds	r2, #72	; 0x48
 8001cb0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cc4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cc6:	6979      	ldr	r1, [r7, #20]
 8001cc8:	3348      	adds	r3, #72	; 0x48
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001cea:	e007      	b.n	8001cfc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d16:	e007      	b.n	8001d28 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	431a      	orrs	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d46:	f023 0201 	bic.w	r2, r3, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e006      	b.n	8001d62 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
  }
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d12e      	bne.n	8001dde <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d98:	f7ff fe1a 	bl	80019d0 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d9e:	e012      	b.n	8001dc6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da0:	f7ff fe16 	bl	80019d0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d90b      	bls.n	8001dc6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e012      	b.n	8001dec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e5      	bne.n	8001da0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e006      	b.n	8001dec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
  }
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d133      	bne.n	8001e70 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff fdda 	bl	80019d0 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e1e:	e012      	b.n	8001e46 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e20:	f7ff fdd6 	bl	80019d0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b0a      	cmp	r3, #10
 8001e2c:	d90b      	bls.n	8001e46 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2205      	movs	r2, #5
 8001e3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e01b      	b.n	8001e7e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0e5      	beq.n	8001e20 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0202 	bic.w	r2, r2, #2
 8001e62:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e006      	b.n	8001e7e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
  }
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e86:	b480      	push	{r7}
 8001e88:	b087      	sub	sp, #28
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d003      	beq.n	8001eaa <HAL_CAN_GetRxMessage+0x24>
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	f040 80f3 	bne.w	8002090 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10e      	bne.n	8001ece <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d116      	bne.n	8001eec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0e7      	b.n	800209e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0d8      	b.n	800209e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	331b      	adds	r3, #27
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	4413      	add	r3, r2
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0204 	and.w	r2, r3, #4
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10c      	bne.n	8001f24 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	331b      	adds	r3, #27
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	4413      	add	r3, r2
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0d5b      	lsrs	r3, r3, #21
 8001f1a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	e00b      	b.n	8001f3c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	331b      	adds	r3, #27
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	4413      	add	r3, r2
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	08db      	lsrs	r3, r3, #3
 8001f34:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	331b      	adds	r3, #27
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	4413      	add	r3, r2
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0202 	and.w	r2, r3, #2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	331b      	adds	r3, #27
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3304      	adds	r3, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 020f 	and.w	r2, r3, #15
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	331b      	adds	r3, #27
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	4413      	add	r3, r2
 8001f76:	3304      	adds	r3, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	331b      	adds	r3, #27
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3304      	adds	r3, #4
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	0c1b      	lsrs	r3, r3, #16
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0a1a      	lsrs	r2, r3, #8
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	0c1a      	lsrs	r2, r3, #16
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	3302      	adds	r3, #2
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e1a      	lsrs	r2, r3, #24
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	3303      	adds	r3, #3
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	4413      	add	r3, r2
 8002008:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	3304      	adds	r3, #4
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	4413      	add	r3, r2
 8002020:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0a1a      	lsrs	r2, r3, #8
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	3305      	adds	r3, #5
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	4413      	add	r3, r2
 800203a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0c1a      	lsrs	r2, r3, #16
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	3306      	adds	r3, #6
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4413      	add	r3, r2
 8002054:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0e1a      	lsrs	r2, r3, #24
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	3307      	adds	r3, #7
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d108      	bne.n	800207c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0220 	orr.w	r2, r2, #32
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	e007      	b.n	800208c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0220 	orr.w	r2, r2, #32
 800208a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	e006      	b.n	800209e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
  }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020bc:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020be:	7afb      	ldrb	r3, [r7, #11]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d002      	beq.n	80020ca <HAL_CAN_GetRxFifoFillLevel+0x22>
 80020c4:	7afb      	ldrb	r3, [r7, #11]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d10f      	bne.n	80020ea <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d106      	bne.n	80020de <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e005      	b.n	80020ea <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
	...

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212a:	4a04      	ldr	r2, [pc, #16]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff90 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff49 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff5e 	bl	8002140 <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff90 	bl	80021b0 <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5f 	bl	800215c <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffb0 	bl	8002214 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b08b      	sub	sp, #44	; 0x2c
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d2:	e169      	b.n	80025a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022d4:	2201      	movs	r2, #1
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 8158 	bne.w	80025a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4a9a      	ldr	r2, [pc, #616]	; (8002560 <HAL_GPIO_Init+0x2a0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d05e      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 80022fc:	4a98      	ldr	r2, [pc, #608]	; (8002560 <HAL_GPIO_Init+0x2a0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d875      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002302:	4a98      	ldr	r2, [pc, #608]	; (8002564 <HAL_GPIO_Init+0x2a4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d058      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002308:	4a96      	ldr	r2, [pc, #600]	; (8002564 <HAL_GPIO_Init+0x2a4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d86f      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800230e:	4a96      	ldr	r2, [pc, #600]	; (8002568 <HAL_GPIO_Init+0x2a8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d052      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002314:	4a94      	ldr	r2, [pc, #592]	; (8002568 <HAL_GPIO_Init+0x2a8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d869      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800231a:	4a94      	ldr	r2, [pc, #592]	; (800256c <HAL_GPIO_Init+0x2ac>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d04c      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002320:	4a92      	ldr	r2, [pc, #584]	; (800256c <HAL_GPIO_Init+0x2ac>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d863      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002326:	4a92      	ldr	r2, [pc, #584]	; (8002570 <HAL_GPIO_Init+0x2b0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d046      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 800232c:	4a90      	ldr	r2, [pc, #576]	; (8002570 <HAL_GPIO_Init+0x2b0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d85d      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002332:	2b12      	cmp	r3, #18
 8002334:	d82a      	bhi.n	800238c <HAL_GPIO_Init+0xcc>
 8002336:	2b12      	cmp	r3, #18
 8002338:	d859      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <HAL_GPIO_Init+0x80>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	080023bb 	.word	0x080023bb
 8002344:	08002395 	.word	0x08002395
 8002348:	080023a7 	.word	0x080023a7
 800234c:	080023e9 	.word	0x080023e9
 8002350:	080023ef 	.word	0x080023ef
 8002354:	080023ef 	.word	0x080023ef
 8002358:	080023ef 	.word	0x080023ef
 800235c:	080023ef 	.word	0x080023ef
 8002360:	080023ef 	.word	0x080023ef
 8002364:	080023ef 	.word	0x080023ef
 8002368:	080023ef 	.word	0x080023ef
 800236c:	080023ef 	.word	0x080023ef
 8002370:	080023ef 	.word	0x080023ef
 8002374:	080023ef 	.word	0x080023ef
 8002378:	080023ef 	.word	0x080023ef
 800237c:	080023ef 	.word	0x080023ef
 8002380:	080023ef 	.word	0x080023ef
 8002384:	0800239d 	.word	0x0800239d
 8002388:	080023b1 	.word	0x080023b1
 800238c:	4a79      	ldr	r2, [pc, #484]	; (8002574 <HAL_GPIO_Init+0x2b4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002392:	e02c      	b.n	80023ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	623b      	str	r3, [r7, #32]
          break;
 800239a:	e029      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	3304      	adds	r3, #4
 80023a2:	623b      	str	r3, [r7, #32]
          break;
 80023a4:	e024      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	3308      	adds	r3, #8
 80023ac:	623b      	str	r3, [r7, #32]
          break;
 80023ae:	e01f      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	330c      	adds	r3, #12
 80023b6:	623b      	str	r3, [r7, #32]
          break;
 80023b8:	e01a      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023c2:	2304      	movs	r3, #4
 80023c4:	623b      	str	r3, [r7, #32]
          break;
 80023c6:	e013      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d0:	2308      	movs	r3, #8
 80023d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	611a      	str	r2, [r3, #16]
          break;
 80023da:	e009      	b.n	80023f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023dc:	2308      	movs	r3, #8
 80023de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	615a      	str	r2, [r3, #20]
          break;
 80023e6:	e003      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
          break;
 80023ec:	e000      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          break;
 80023ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2bff      	cmp	r3, #255	; 0xff
 80023f4:	d801      	bhi.n	80023fa <HAL_GPIO_Init+0x13a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	e001      	b.n	80023fe <HAL_GPIO_Init+0x13e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3304      	adds	r3, #4
 80023fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2bff      	cmp	r3, #255	; 0xff
 8002404:	d802      	bhi.n	800240c <HAL_GPIO_Init+0x14c>
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	e002      	b.n	8002412 <HAL_GPIO_Init+0x152>
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	3b08      	subs	r3, #8
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	210f      	movs	r1, #15
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	401a      	ands	r2, r3
 8002424:	6a39      	ldr	r1, [r7, #32]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	431a      	orrs	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80b1 	beq.w	80025a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002440:	4b4d      	ldr	r3, [pc, #308]	; (8002578 <HAL_GPIO_Init+0x2b8>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4a4c      	ldr	r2, [pc, #304]	; (8002578 <HAL_GPIO_Init+0x2b8>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6193      	str	r3, [r2, #24]
 800244c:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <HAL_GPIO_Init+0x2b8>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002458:	4a48      	ldr	r2, [pc, #288]	; (800257c <HAL_GPIO_Init+0x2bc>)
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002464:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4013      	ands	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a40      	ldr	r2, [pc, #256]	; (8002580 <HAL_GPIO_Init+0x2c0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_GPIO_Init+0x1ec>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3f      	ldr	r2, [pc, #252]	; (8002584 <HAL_GPIO_Init+0x2c4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00d      	beq.n	80024a8 <HAL_GPIO_Init+0x1e8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a3e      	ldr	r2, [pc, #248]	; (8002588 <HAL_GPIO_Init+0x2c8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <HAL_GPIO_Init+0x1e4>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a3d      	ldr	r2, [pc, #244]	; (800258c <HAL_GPIO_Init+0x2cc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_GPIO_Init+0x1e0>
 800249c:	2303      	movs	r3, #3
 800249e:	e006      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a0:	2304      	movs	r3, #4
 80024a2:	e004      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e002      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024ac:	2300      	movs	r3, #0
 80024ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b0:	f002 0203 	and.w	r2, r2, #3
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	4093      	lsls	r3, r2
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024be:	492f      	ldr	r1, [pc, #188]	; (800257c <HAL_GPIO_Init+0x2bc>)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	492c      	ldr	r1, [pc, #176]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4928      	ldr	r1, [pc, #160]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002500:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4922      	ldr	r1, [pc, #136]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	43db      	mvns	r3, r3
 8002516:	491e      	ldr	r1, [pc, #120]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002518:	4013      	ands	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4918      	ldr	r1, [pc, #96]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	608b      	str	r3, [r1, #8]
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002536:	4b16      	ldr	r3, [pc, #88]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	43db      	mvns	r3, r3
 800253e:	4914      	ldr	r1, [pc, #80]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002540:	4013      	ands	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d021      	beq.n	8002594 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	490e      	ldr	r1, [pc, #56]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
 800255c:	e021      	b.n	80025a2 <HAL_GPIO_Init+0x2e2>
 800255e:	bf00      	nop
 8002560:	10320000 	.word	0x10320000
 8002564:	10310000 	.word	0x10310000
 8002568:	10220000 	.word	0x10220000
 800256c:	10210000 	.word	0x10210000
 8002570:	10120000 	.word	0x10120000
 8002574:	10110000 	.word	0x10110000
 8002578:	40021000 	.word	0x40021000
 800257c:	40010000 	.word	0x40010000
 8002580:	40010800 	.word	0x40010800
 8002584:	40010c00 	.word	0x40010c00
 8002588:	40011000 	.word	0x40011000
 800258c:	40011400 	.word	0x40011400
 8002590:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	43db      	mvns	r3, r3
 800259c:	4909      	ldr	r1, [pc, #36]	; (80025c4 <HAL_GPIO_Init+0x304>)
 800259e:	4013      	ands	r3, r2
 80025a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	3301      	adds	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	fa22 f303 	lsr.w	r3, r2, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f47f ae8e 	bne.w	80022d4 <HAL_GPIO_Init+0x14>
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	372c      	adds	r7, #44	; 0x2c
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e001      	b.n	80025ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	807b      	strh	r3, [r7, #2]
 8002602:	4613      	mov	r3, r2
 8002604:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002606:	787b      	ldrb	r3, [r7, #1]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260c:	887a      	ldrh	r2, [r7, #2]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002612:	e003      	b.n	800261c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	041a      	lsls	r2, r3, #16
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002628:	b08b      	sub	sp, #44	; 0x2c
 800262a:	af06      	add	r7, sp, #24
 800262c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0fd      	b.n	8002834 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d106      	bne.n	8002652 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff f8f5 	bl	800183c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2203      	movs	r2, #3
 8002656:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f001 fa07 	bl	8003a72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	687e      	ldr	r6, [r7, #4]
 800266c:	466d      	mov	r5, sp
 800266e:	f106 0410 	add.w	r4, r6, #16
 8002672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	602b      	str	r3, [r5, #0]
 800267a:	1d33      	adds	r3, r6, #4
 800267c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800267e:	6838      	ldr	r0, [r7, #0]
 8002680:	f001 f9e7 	bl	8003a52 <USB_CoreInit>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2202      	movs	r2, #2
 800268e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0ce      	b.n	8002834 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f001 fa02 	bl	8003aa6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
 80026a6:	e04c      	b.n	8002742 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	440b      	add	r3, r1
 80026b8:	3301      	adds	r3, #1
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	440b      	add	r3, r1
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	b298      	uxth	r0, r3
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	440b      	add	r3, r1
 80026e4:	3336      	adds	r3, #54	; 0x36
 80026e6:	4602      	mov	r2, r0
 80026e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	3303      	adds	r3, #3
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	3338      	adds	r3, #56	; 0x38
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	333c      	adds	r3, #60	; 0x3c
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	3340      	adds	r3, #64	; 0x40
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	3301      	adds	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	429a      	cmp	r2, r3
 800274a:	d3ad      	bcc.n	80026a8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	e044      	b.n	80027dc <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	440b      	add	r3, r1
 8002760:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	440b      	add	r3, r1
 8002776:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800277e:	7bfa      	ldrb	r2, [r7, #15]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	440b      	add	r3, r1
 800278c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027c0:	7bfa      	ldrb	r2, [r7, #15]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	3301      	adds	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d3b5      	bcc.n	8002752 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	687e      	ldr	r6, [r7, #4]
 80027ee:	466d      	mov	r5, sp
 80027f0:	f106 0410 	add.w	r4, r6, #16
 80027f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	602b      	str	r3, [r5, #0]
 80027fc:	1d33      	adds	r3, r6, #4
 80027fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002800:	6838      	ldr	r0, [r7, #0]
 8002802:	f001 f95c 	bl	8003abe <USB_DevInit>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e00d      	b.n	8002834 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f001 f966 	bl	8003afe <USB_DevDisconnect>

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800283c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e272      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8087 	beq.w	800296a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800285c:	4b92      	ldr	r3, [pc, #584]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b04      	cmp	r3, #4
 8002866:	d00c      	beq.n	8002882 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002868:	4b8f      	ldr	r3, [pc, #572]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d112      	bne.n	800289a <HAL_RCC_OscConfig+0x5e>
 8002874:	4b8c      	ldr	r3, [pc, #560]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002880:	d10b      	bne.n	800289a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002882:	4b89      	ldr	r3, [pc, #548]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d06c      	beq.n	8002968 <HAL_RCC_OscConfig+0x12c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d168      	bne.n	8002968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e24c      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x76>
 80028a4:	4b80      	ldr	r3, [pc, #512]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a7f      	ldr	r2, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e02e      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x98>
 80028ba:	4b7b      	ldr	r3, [pc, #492]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7a      	ldr	r2, [pc, #488]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b78      	ldr	r3, [pc, #480]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a77      	ldr	r2, [pc, #476]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e01d      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0xbc>
 80028de:	4b72      	ldr	r3, [pc, #456]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a71      	ldr	r2, [pc, #452]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b6f      	ldr	r3, [pc, #444]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a6e      	ldr	r2, [pc, #440]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028f8:	4b6b      	ldr	r3, [pc, #428]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6a      	ldr	r2, [pc, #424]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800290a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff f85a 	bl	80019d0 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7ff f856 	bl	80019d0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e200      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0xe4>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7ff f846 	bl	80019d0 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7ff f842 	bl	80019d0 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e1ec      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	4b53      	ldr	r3, [pc, #332]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x10c>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d063      	beq.n	8002a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002976:	4b4c      	ldr	r3, [pc, #304]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002982:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b08      	cmp	r3, #8
 800298c:	d11c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x18c>
 800298e:	4b46      	ldr	r3, [pc, #280]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d116      	bne.n	80029c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299a:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_RCC_OscConfig+0x176>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e1c0      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4939      	ldr	r1, [pc, #228]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	e03a      	b.n	8002a3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7fe fffb 	bl	80019d0 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029de:	f7fe fff7 	bl	80019d0 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1a1      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4927      	ldr	r1, [pc, #156]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
 8002a10:	e015      	b.n	8002a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a12:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe ffda 	bl	80019d0 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a20:	f7fe ffd6 	bl	80019d0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e180      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d03a      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d019      	beq.n	8002a86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a58:	f7fe ffba 	bl	80019d0 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a60:	f7fe ffb6 	bl	80019d0 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e160      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f000 faa6 	bl	8002fd0 <RCC_Delay>
 8002a84:	e01c      	b.n	8002ac0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe ffa0 	bl	80019d0 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a92:	e00f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a94:	f7fe ff9c 	bl	80019d0 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d908      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e146      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	42420000 	.word	0x42420000
 8002ab0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b92      	ldr	r3, [pc, #584]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e9      	bne.n	8002a94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a6 	beq.w	8002c1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10d      	bne.n	8002afa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4a87      	ldr	r2, [pc, #540]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	61d3      	str	r3, [r2, #28]
 8002aea:	4b85      	ldr	r3, [pc, #532]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	4b82      	ldr	r3, [pc, #520]	; (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d118      	bne.n	8002b38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b06:	4b7f      	ldr	r3, [pc, #508]	; (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7e      	ldr	r2, [pc, #504]	; (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b12:	f7fe ff5d 	bl	80019d0 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1a:	f7fe ff59 	bl	80019d0 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b64      	cmp	r3, #100	; 0x64
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e103      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b75      	ldr	r3, [pc, #468]	; (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x312>
 8002b40:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a6e      	ldr	r2, [pc, #440]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6213      	str	r3, [r2, #32]
 8002b4c:	e02d      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x334>
 8002b56:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a69      	ldr	r2, [pc, #420]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	4b67      	ldr	r3, [pc, #412]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a66      	ldr	r2, [pc, #408]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	6213      	str	r3, [r2, #32]
 8002b6e:	e01c      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x356>
 8002b78:	4b61      	ldr	r3, [pc, #388]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4a60      	ldr	r2, [pc, #384]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	6213      	str	r3, [r2, #32]
 8002b84:	4b5e      	ldr	r3, [pc, #376]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4a5d      	ldr	r2, [pc, #372]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6213      	str	r3, [r2, #32]
 8002b90:	e00b      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b92:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4a5a      	ldr	r2, [pc, #360]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6213      	str	r3, [r2, #32]
 8002b9e:	4b58      	ldr	r3, [pc, #352]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a57      	ldr	r2, [pc, #348]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d015      	beq.n	8002bde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7fe ff0d 	bl	80019d0 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fe ff09 	bl	80019d0 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e0b1      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ee      	beq.n	8002bba <HAL_RCC_OscConfig+0x37e>
 8002bdc:	e014      	b.n	8002c08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7fe fef7 	bl	80019d0 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7fe fef3 	bl	80019d0 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e09b      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfc:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ee      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0e:	4b3c      	ldr	r3, [pc, #240]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4a3b      	ldr	r2, [pc, #236]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8087 	beq.w	8002d32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c24:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d061      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d146      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c38:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <HAL_RCC_OscConfig+0x4cc>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fec7 	bl	80019d0 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c46:	f7fe fec3 	bl	80019d0 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e06d      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f0      	bne.n	8002c46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6c:	d108      	bne.n	8002c80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	4921      	ldr	r1, [pc, #132]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c80:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a19      	ldr	r1, [r3, #32]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	430b      	orrs	r3, r1
 8002c92:	491b      	ldr	r1, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x4cc>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fe97 	bl	80019d0 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7fe fe93 	bl	80019d0 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e03d      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x46a>
 8002cc4:	e035      	b.n	8002d32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_OscConfig+0x4cc>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fe80 	bl	80019d0 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe fe7c 	bl	80019d0 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e026      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x498>
 8002cf2:	e01e      	b.n	8002d32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e019      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40007000 	.word	0x40007000
 8002d08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000

08002d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0d0      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d910      	bls.n	8002d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 0207 	bic.w	r2, r3, #7
 8002d6a:	4965      	ldr	r1, [pc, #404]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b63      	ldr	r3, [pc, #396]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0b8      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d9c:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a58      	ldr	r2, [pc, #352]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db4:	4b53      	ldr	r3, [pc, #332]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a52      	ldr	r2, [pc, #328]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc0:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	494d      	ldr	r1, [pc, #308]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d040      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d107      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d115      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e07f      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e073      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e06b      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1e:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f023 0203 	bic.w	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4936      	ldr	r1, [pc, #216]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e30:	f7fe fdce 	bl	80019d0 <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e38:	f7fe fdca 	bl	80019d0 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e053      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 020c 	and.w	r2, r3, #12
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d1eb      	bne.n	8002e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e60:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d210      	bcs.n	8002e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 0207 	bic.w	r2, r3, #7
 8002e76:	4922      	ldr	r1, [pc, #136]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e032      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4916      	ldr	r1, [pc, #88]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	490e      	ldr	r1, [pc, #56]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ece:	f000 f821 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	490a      	ldr	r1, [pc, #40]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee0:	5ccb      	ldrb	r3, [r1, r3]
 8002ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee6:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1cc>)
 8002ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <HAL_RCC_ClockConfig+0x1d0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe fd2c 	bl	800194c <HAL_InitTick>

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40022000 	.word	0x40022000
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08003d20 	.word	0x08003d20
 8002f0c:	20000000 	.word	0x20000000
 8002f10:	20000004 	.word	0x20000004

08002f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f14:	b490      	push	{r4, r7}
 8002f16:	b08a      	sub	sp, #40	; 0x28
 8002f18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f1a:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f1c:	1d3c      	adds	r4, r7, #4
 8002f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f24:	f240 2301 	movw	r3, #513	; 0x201
 8002f28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f3e:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d002      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x40>
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d003      	beq.n	8002f5a <HAL_RCC_GetSysClockFreq+0x46>
 8002f52:	e02b      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f56:	623b      	str	r3, [r7, #32]
      break;
 8002f58:	e02b      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	0c9b      	lsrs	r3, r3, #18
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3328      	adds	r3, #40	; 0x28
 8002f64:	443b      	add	r3, r7
 8002f66:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f6a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d012      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	0c5b      	lsrs	r3, r3, #17
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	3328      	adds	r3, #40	; 0x28
 8002f82:	443b      	add	r3, r7
 8002f84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f8e:	fb03 f202 	mul.w	r2, r3, r2
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9a:	e004      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa0:	fb02 f303 	mul.w	r3, r2, r3
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	623b      	str	r3, [r7, #32]
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fae:	623b      	str	r3, [r7, #32]
      break;
 8002fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3728      	adds	r7, #40	; 0x28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc90      	pop	{r4, r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	08003d00 	.word	0x08003d00
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	007a1200 	.word	0x007a1200
 8002fcc:	003d0900 	.word	0x003d0900

08002fd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <RCC_Delay+0x34>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <RCC_Delay+0x38>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	0a5b      	lsrs	r3, r3, #9
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fec:	bf00      	nop
  }
  while (Delay --);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1e5a      	subs	r2, r3, #1
 8002ff2:	60fa      	str	r2, [r7, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f9      	bne.n	8002fec <RCC_Delay+0x1c>
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	20000000 	.word	0x20000000
 8003008:	10624dd3 	.word	0x10624dd3

0800300c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d07d      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003028:	2300      	movs	r3, #0
 800302a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302c:	4b4f      	ldr	r3, [pc, #316]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003038:	4b4c      	ldr	r3, [pc, #304]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	4a4b      	ldr	r2, [pc, #300]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003042:	61d3      	str	r3, [r2, #28]
 8003044:	4b49      	ldr	r3, [pc, #292]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003050:	2301      	movs	r3, #1
 8003052:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003054:	4b46      	ldr	r3, [pc, #280]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d118      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003060:	4b43      	ldr	r3, [pc, #268]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a42      	ldr	r2, [pc, #264]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306c:	f7fe fcb0 	bl	80019d0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003072:	e008      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003074:	f7fe fcac 	bl	80019d0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e06d      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003086:	4b3a      	ldr	r3, [pc, #232]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003092:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d02e      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d027      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030b0:	4b2e      	ldr	r3, [pc, #184]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030ba:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030c0:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030c6:	4a29      	ldr	r2, [pc, #164]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d014      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fe fc7b 	bl	80019d0 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fe fc77 	bl	80019d0 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e036      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f4:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ee      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003100:	4b1a      	ldr	r3, [pc, #104]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4917      	ldr	r1, [pc, #92]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310e:	4313      	orrs	r3, r2
 8003110:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003112:	7dfb      	ldrb	r3, [r7, #23]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d105      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003118:	4b14      	ldr	r3, [pc, #80]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	4a13      	ldr	r2, [pc, #76]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003122:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003130:	4b0e      	ldr	r3, [pc, #56]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	490b      	ldr	r1, [pc, #44]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313e:	4313      	orrs	r3, r2
 8003140:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	4904      	ldr	r1, [pc, #16]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	40007000 	.word	0x40007000
 8003174:	42420440 	.word	0x42420440

08003178 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e041      	b.n	800320e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fe fa48 	bl	8001634 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3304      	adds	r3, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f000 f98e 	bl	80034d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d109      	bne.n	800323c <HAL_TIM_PWM_Start+0x24>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e022      	b.n	8003282 <HAL_TIM_PWM_Start+0x6a>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b04      	cmp	r3, #4
 8003240:	d109      	bne.n	8003256 <HAL_TIM_PWM_Start+0x3e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	e015      	b.n	8003282 <HAL_TIM_PWM_Start+0x6a>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d109      	bne.n	8003270 <HAL_TIM_PWM_Start+0x58>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	bf14      	ite	ne
 8003268:	2301      	movne	r3, #1
 800326a:	2300      	moveq	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e008      	b.n	8003282 <HAL_TIM_PWM_Start+0x6a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e05e      	b.n	8003348 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <HAL_TIM_PWM_Start+0x82>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003298:	e013      	b.n	80032c2 <HAL_TIM_PWM_Start+0xaa>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d104      	bne.n	80032aa <HAL_TIM_PWM_Start+0x92>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a8:	e00b      	b.n	80032c2 <HAL_TIM_PWM_Start+0xaa>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_PWM_Start+0xa2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b8:	e003      	b.n	80032c2 <HAL_TIM_PWM_Start+0xaa>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2201      	movs	r2, #1
 80032c8:	6839      	ldr	r1, [r7, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 faee 	bl	80038ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <HAL_TIM_PWM_Start+0x138>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d107      	bne.n	80032ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a18      	ldr	r2, [pc, #96]	; (8003350 <HAL_TIM_PWM_Start+0x138>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00e      	beq.n	8003312 <HAL_TIM_PWM_Start+0xfa>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fc:	d009      	beq.n	8003312 <HAL_TIM_PWM_Start+0xfa>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a14      	ldr	r2, [pc, #80]	; (8003354 <HAL_TIM_PWM_Start+0x13c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_TIM_PWM_Start+0xfa>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a12      	ldr	r2, [pc, #72]	; (8003358 <HAL_TIM_PWM_Start+0x140>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d111      	bne.n	8003336 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b06      	cmp	r3, #6
 8003322:	d010      	beq.n	8003346 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003334:	e007      	b.n	8003346 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40012c00 	.word	0x40012c00
 8003354:	40000400 	.word	0x40000400
 8003358:	40000800 	.word	0x40000800

0800335c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003372:	2302      	movs	r3, #2
 8003374:	e0ac      	b.n	80034d0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b0c      	cmp	r3, #12
 8003382:	f200 809f 	bhi.w	80034c4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003386:	a201      	add	r2, pc, #4	; (adr r2, 800338c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	080033c1 	.word	0x080033c1
 8003390:	080034c5 	.word	0x080034c5
 8003394:	080034c5 	.word	0x080034c5
 8003398:	080034c5 	.word	0x080034c5
 800339c:	08003401 	.word	0x08003401
 80033a0:	080034c5 	.word	0x080034c5
 80033a4:	080034c5 	.word	0x080034c5
 80033a8:	080034c5 	.word	0x080034c5
 80033ac:	08003443 	.word	0x08003443
 80033b0:	080034c5 	.word	0x080034c5
 80033b4:	080034c5 	.word	0x080034c5
 80033b8:	080034c5 	.word	0x080034c5
 80033bc:	08003483 	.word	0x08003483
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f8e8 	bl	800359c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0208 	orr.w	r2, r2, #8
 80033da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0204 	bic.w	r2, r2, #4
 80033ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6999      	ldr	r1, [r3, #24]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	619a      	str	r2, [r3, #24]
      break;
 80033fe:	e062      	b.n	80034c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f92e 	bl	8003668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800342a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6999      	ldr	r1, [r3, #24]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	021a      	lsls	r2, r3, #8
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	619a      	str	r2, [r3, #24]
      break;
 8003440:	e041      	b.n	80034c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f977 	bl	800373c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0208 	orr.w	r2, r2, #8
 800345c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0204 	bic.w	r2, r2, #4
 800346c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69d9      	ldr	r1, [r3, #28]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	61da      	str	r2, [r3, #28]
      break;
 8003480:	e021      	b.n	80034c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	4618      	mov	r0, r3
 800348a:	f000 f9c1 	bl	8003810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800349c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69da      	ldr	r2, [r3, #28]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69d9      	ldr	r1, [r3, #28]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	021a      	lsls	r2, r3, #8
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	61da      	str	r2, [r3, #28]
      break;
 80034c2:	e000      	b.n	80034c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80034c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a29      	ldr	r2, [pc, #164]	; (8003590 <TIM_Base_SetConfig+0xb8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f6:	d007      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a26      	ldr	r2, [pc, #152]	; (8003594 <TIM_Base_SetConfig+0xbc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a25      	ldr	r2, [pc, #148]	; (8003598 <TIM_Base_SetConfig+0xc0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d108      	bne.n	800351a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1c      	ldr	r2, [pc, #112]	; (8003590 <TIM_Base_SetConfig+0xb8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00b      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003528:	d007      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a19      	ldr	r2, [pc, #100]	; (8003594 <TIM_Base_SetConfig+0xbc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a18      	ldr	r2, [pc, #96]	; (8003598 <TIM_Base_SetConfig+0xc0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d108      	bne.n	800354c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a07      	ldr	r2, [pc, #28]	; (8003590 <TIM_Base_SetConfig+0xb8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d103      	bne.n	8003580 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	615a      	str	r2, [r3, #20]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	40012c00 	.word	0x40012c00
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800

0800359c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f023 0201 	bic.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f023 0302 	bic.w	r3, r3, #2
 80035e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a1c      	ldr	r2, [pc, #112]	; (8003664 <TIM_OC1_SetConfig+0xc8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d10c      	bne.n	8003612 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 0308 	bic.w	r3, r3, #8
 80035fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a13      	ldr	r2, [pc, #76]	; (8003664 <TIM_OC1_SetConfig+0xc8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d111      	bne.n	800363e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40012c00 	.word	0x40012c00

08003668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f023 0210 	bic.w	r2, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0320 	bic.w	r3, r3, #32
 80036b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <TIM_OC2_SetConfig+0xd0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10d      	bne.n	80036e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a14      	ldr	r2, [pc, #80]	; (8003738 <TIM_OC2_SetConfig+0xd0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d113      	bne.n	8003714 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	621a      	str	r2, [r3, #32]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	40012c00 	.word	0x40012c00

0800373c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a1d      	ldr	r2, [pc, #116]	; (800380c <TIM_OC3_SetConfig+0xd0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10d      	bne.n	80037b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <TIM_OC3_SetConfig+0xd0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d113      	bne.n	80037e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	621a      	str	r2, [r3, #32]
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40012c00 	.word	0x40012c00

08003810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800383e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	021b      	lsls	r3, r3, #8
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800385a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	031b      	lsls	r3, r3, #12
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a0f      	ldr	r2, [pc, #60]	; (80038a8 <TIM_OC4_SetConfig+0x98>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d109      	bne.n	8003884 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	019b      	lsls	r3, r3, #6
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	621a      	str	r2, [r3, #32]
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	40012c00 	.word	0x40012c00

080038ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	2201      	movs	r2, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a1a      	ldr	r2, [r3, #32]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	401a      	ands	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1a      	ldr	r2, [r3, #32]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 031f 	and.w	r3, r3, #31
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003908:	2302      	movs	r3, #2
 800390a:	e046      	b.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00e      	beq.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003958:	d009      	beq.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d004      	beq.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a10      	ldr	r2, [pc, #64]	; (80039ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d10c      	bne.n	8003988 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	4313      	orrs	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800

080039b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e03d      	b.n	8003a48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a52:	b084      	sub	sp, #16
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	f107 0014 	add.w	r0, r7, #20
 8003a60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	b004      	add	sp, #16
 8003a70:	4770      	bx	lr

08003a72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a7a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003a7e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	4013      	ands	r3, r2
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr

08003aa6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003abe:	b084      	sub	sp, #16
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	f107 0014 	add.w	r0, r7, #20
 8003acc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	b004      	add	sp, #16
 8003afc:	4770      	bx	lr

08003afe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr

08003b12 <_ZdlPvj>:
 8003b12:	f000 b800 	b.w	8003b16 <_ZdlPv>

08003b16 <_ZdlPv>:
 8003b16:	f000 b825 	b.w	8003b64 <free>
	...

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	2600      	movs	r6, #0
 8003b20:	4d0c      	ldr	r5, [pc, #48]	; (8003b54 <__libc_init_array+0x38>)
 8003b22:	4c0d      	ldr	r4, [pc, #52]	; (8003b58 <__libc_init_array+0x3c>)
 8003b24:	1b64      	subs	r4, r4, r5
 8003b26:	10a4      	asrs	r4, r4, #2
 8003b28:	42a6      	cmp	r6, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	f000 f88e 	bl	8003c4c <_init>
 8003b30:	2600      	movs	r6, #0
 8003b32:	4d0a      	ldr	r5, [pc, #40]	; (8003b5c <__libc_init_array+0x40>)
 8003b34:	4c0a      	ldr	r4, [pc, #40]	; (8003b60 <__libc_init_array+0x44>)
 8003b36:	1b64      	subs	r4, r4, r5
 8003b38:	10a4      	asrs	r4, r4, #2
 8003b3a:	42a6      	cmp	r6, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b44:	4798      	blx	r3
 8003b46:	3601      	adds	r6, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4e:	4798      	blx	r3
 8003b50:	3601      	adds	r6, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	08003d30 	.word	0x08003d30
 8003b58:	08003d30 	.word	0x08003d30
 8003b5c:	08003d30 	.word	0x08003d30
 8003b60:	08003d34 	.word	0x08003d34

08003b64 <free>:
 8003b64:	4b02      	ldr	r3, [pc, #8]	; (8003b70 <free+0xc>)
 8003b66:	4601      	mov	r1, r0
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	f000 b819 	b.w	8003ba0 <_free_r>
 8003b6e:	bf00      	nop
 8003b70:	2000000c 	.word	0x2000000c

08003b74 <memcpy>:
 8003b74:	440a      	add	r2, r1
 8003b76:	4291      	cmp	r1, r2
 8003b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b7c:	d100      	bne.n	8003b80 <memcpy+0xc>
 8003b7e:	4770      	bx	lr
 8003b80:	b510      	push	{r4, lr}
 8003b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b86:	4291      	cmp	r1, r2
 8003b88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b8c:	d1f9      	bne.n	8003b82 <memcpy+0xe>
 8003b8e:	bd10      	pop	{r4, pc}

08003b90 <memset>:
 8003b90:	4603      	mov	r3, r0
 8003b92:	4402      	add	r2, r0
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d100      	bne.n	8003b9a <memset+0xa>
 8003b98:	4770      	bx	lr
 8003b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b9e:	e7f9      	b.n	8003b94 <memset+0x4>

08003ba0 <_free_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4605      	mov	r5, r0
 8003ba4:	2900      	cmp	r1, #0
 8003ba6:	d040      	beq.n	8003c2a <_free_r+0x8a>
 8003ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bac:	1f0c      	subs	r4, r1, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bfb8      	it	lt
 8003bb2:	18e4      	addlt	r4, r4, r3
 8003bb4:	f000 f83c 	bl	8003c30 <__malloc_lock>
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <_free_r+0x8c>)
 8003bba:	6813      	ldr	r3, [r2, #0]
 8003bbc:	b933      	cbnz	r3, 8003bcc <_free_r+0x2c>
 8003bbe:	6063      	str	r3, [r4, #4]
 8003bc0:	6014      	str	r4, [r2, #0]
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bc8:	f000 b838 	b.w	8003c3c <__malloc_unlock>
 8003bcc:	42a3      	cmp	r3, r4
 8003bce:	d908      	bls.n	8003be2 <_free_r+0x42>
 8003bd0:	6820      	ldr	r0, [r4, #0]
 8003bd2:	1821      	adds	r1, r4, r0
 8003bd4:	428b      	cmp	r3, r1
 8003bd6:	bf01      	itttt	eq
 8003bd8:	6819      	ldreq	r1, [r3, #0]
 8003bda:	685b      	ldreq	r3, [r3, #4]
 8003bdc:	1809      	addeq	r1, r1, r0
 8003bde:	6021      	streq	r1, [r4, #0]
 8003be0:	e7ed      	b.n	8003bbe <_free_r+0x1e>
 8003be2:	461a      	mov	r2, r3
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	b10b      	cbz	r3, 8003bec <_free_r+0x4c>
 8003be8:	42a3      	cmp	r3, r4
 8003bea:	d9fa      	bls.n	8003be2 <_free_r+0x42>
 8003bec:	6811      	ldr	r1, [r2, #0]
 8003bee:	1850      	adds	r0, r2, r1
 8003bf0:	42a0      	cmp	r0, r4
 8003bf2:	d10b      	bne.n	8003c0c <_free_r+0x6c>
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	4401      	add	r1, r0
 8003bf8:	1850      	adds	r0, r2, r1
 8003bfa:	4283      	cmp	r3, r0
 8003bfc:	6011      	str	r1, [r2, #0]
 8003bfe:	d1e0      	bne.n	8003bc2 <_free_r+0x22>
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4401      	add	r1, r0
 8003c06:	6011      	str	r1, [r2, #0]
 8003c08:	6053      	str	r3, [r2, #4]
 8003c0a:	e7da      	b.n	8003bc2 <_free_r+0x22>
 8003c0c:	d902      	bls.n	8003c14 <_free_r+0x74>
 8003c0e:	230c      	movs	r3, #12
 8003c10:	602b      	str	r3, [r5, #0]
 8003c12:	e7d6      	b.n	8003bc2 <_free_r+0x22>
 8003c14:	6820      	ldr	r0, [r4, #0]
 8003c16:	1821      	adds	r1, r4, r0
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	bf01      	itttt	eq
 8003c1c:	6819      	ldreq	r1, [r3, #0]
 8003c1e:	685b      	ldreq	r3, [r3, #4]
 8003c20:	1809      	addeq	r1, r1, r0
 8003c22:	6021      	streq	r1, [r4, #0]
 8003c24:	6063      	str	r3, [r4, #4]
 8003c26:	6054      	str	r4, [r2, #4]
 8003c28:	e7cb      	b.n	8003bc2 <_free_r+0x22>
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
 8003c2c:	200004c4 	.word	0x200004c4

08003c30 <__malloc_lock>:
 8003c30:	4801      	ldr	r0, [pc, #4]	; (8003c38 <__malloc_lock+0x8>)
 8003c32:	f000 b809 	b.w	8003c48 <__retarget_lock_acquire_recursive>
 8003c36:	bf00      	nop
 8003c38:	200004c8 	.word	0x200004c8

08003c3c <__malloc_unlock>:
 8003c3c:	4801      	ldr	r0, [pc, #4]	; (8003c44 <__malloc_unlock+0x8>)
 8003c3e:	f000 b804 	b.w	8003c4a <__retarget_lock_release_recursive>
 8003c42:	bf00      	nop
 8003c44:	200004c8 	.word	0x200004c8

08003c48 <__retarget_lock_acquire_recursive>:
 8003c48:	4770      	bx	lr

08003c4a <__retarget_lock_release_recursive>:
 8003c4a:	4770      	bx	lr

08003c4c <_init>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	bf00      	nop
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr

08003c58 <_fini>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr
